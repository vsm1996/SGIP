// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id              String         @id @default(cuid())
  name            String?
  username        String?        @unique
  email           String?        @unique
  emailVerified   DateTime?
  hashedPassword  String?
  image           String?
  accounts        Account[]
  sessions        Session[]
  posts           Post[]
  comments        Comment[]
  commentsReplies CommentReply[]
  // likes           Like[]
}

model Post {
  id       String    @id @default(cuid())
  message  String
  userId   String
  likes    Int       @default(0)
  comments Comment[]
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Comment {
  id             String         @id @default(cuid())
  message        String
  likes          Int            @default(0)
  userId         String
  postId         String
  commentReplies CommentReply[]
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  post           Post           @relation(fields: [postId], references: [id])
}

model CommentReply {
  id        String   @id @default(cuid())
  message   String
  likes     Int      @default(0)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment   Comment? @relation(fields: [commentId], references: [id])
  commentId String?
}

model Like {
  id             String  @id @default(cuid())
  count          Int @default(0)
  userId         String
  postId         String?
  commentId      String?
  commentReplyId String?
  // user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  // post           Post?         @relation(fields: [postId], references: [id])
  // comment        Comment?      @relation(fields: [commentId], references: [id])
  // commentReply   CommentReply? @relation(fields: [commentReplyId], references: [id])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
